import json
import os

with open("graph.json", "r") as f:
    G = json.load(f)

id_to_edges = {}
id_to_lvl = {}
nodes = []

typescript = "// Generated by ../levels/combiner.py\n"
typescript += 'import { Graph } from "./GDM-TS";\n'
typescript += 'import {CustomNode } from "./customNode";\n'
typescript += 'import { KEY_DEATH, KEY_END, KEY_START } from "../core/constants";\n'

typescript += "\n// ========= Nodes =========\n"
typescript += "export const MDP = new Graph();\n\n"

typescript += "MDP.addNode(new CustomNode(KEY_START, 0, 0, false, [], -1));\n"
typescript += "MDP.addNode(new CustomNode(KEY_DEATH, -1, 0, true, [], -1));\n"
typescript += "MDP.addNode(new CustomNode(KEY_END, 1, 0, true, [],-1));\n\n"

# Get max reward
max_r = -1
for id in G['graph']:
    max_r = max(max_r, G['graph'][id]["reward"])

print(max_r)

for id in G['graph']:
    if id == "start":
        continue

    with open(os.path.join("segments", f"{id}.txt")) as f:
        levels = []
        lvl = []
        for line in f:
            l = line.strip()
            if l == "&":
                levels.append(lvl)
                lvl = []
            else:
                lvl.append(l)

        levels.append(lvl)
        id_to_lvl[id] = levels

    # depth = id.split("-")[0]
    depth = 1 # TODO: set the depth
    # node = f'new CustomNode("{id}", {-(max_r-G["graph"][id]["reward"])/max_r}, 0, false, [], {depth})'
    N = G['graph'][id]
    is_terminal = "true" if id == 'end' else "false"
    node = f'new CustomNode("{id}", {-(max_r-N["reward"])/max_r}, 0, {is_terminal}, [], {depth})'
    typescript += f"MDP.addNode({node});\n"

typescript += "\n// ========= Edges =========\n"
for id in G['graph']:
    # if id[0] == "1":
    #     typescript += f'MDP.addDefaultEdge(KEY_START, "{id}", [["{id}", 0.99], [KEY_DEATH, 0.01]])\n'

    for tgt in G['graph'][id]["neighbors"]:
        typescript += f'MDP.addDefaultEdge("{id}", "{tgt}", [["{tgt}", 0.99], [KEY_DEATH, 0.01]]);\n'

    typescript += "\n"

typescript += "\n// ========= Level Segments =========\n"
TYPE = "{ [key: string]: string[][] }"
typescript += f"export const idToLevel:{TYPE} = {json.dumps(id_to_lvl, indent=2)};\n"

PATH = os.path.join("..", "src", "LevelGeneration", "levels.ts")
with open(PATH, "w") as f:
    f.write(typescript)

print(f"Graph and levels written to: {PATH}")
