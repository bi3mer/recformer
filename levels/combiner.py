import json
import os

with open("graph.json", "r") as f:
    G = json.load(f)

id_to_lvls = {}

typescript = "// Generated by ../levels/combiner.py\n"
typescript += 'import { Graph } from "./GDM-TS";\n'
typescript += 'import {CustomNode } from "./customNode";\n'
typescript += 'import { KEY_DEATH, KEY_END, KEY_START } from "../core/constants";\n'

typescript += "\n// ========= Nodes =========\n"
typescript += "export const HAND_MDP = new Graph();\n\n"

typescript += "HAND_MDP.addNode(new CustomNode(KEY_START, 0, 0, false, [], [], -1));\n"
typescript += "HAND_MDP.addNode(new CustomNode(KEY_DEATH, -1, 0, true, [], [], -1));\n"

# Get max reward
max_r = -1
for src in G['graph']:
    max_r = max(max_r, G['graph'][src]["reward"])

for src in G['graph']:
    if src == "start":
        continue

    with open(os.path.join("segments", f"{src}.txt")) as f:
        levels = []
        lvl = []
        for line in f:
            l = line.strip()
            if l == "&":
                levels.append(lvl)
                lvl = []
            else:
                lvl.append(l)

        levels.append(lvl)

    id_to_lvls[src] = len(levels)

    N = G['graph'][src]
    is_terminal = "true" if src == 'end' else "false"
    r = -(max_r-N["reward"])/max_r
    d = N["depth"]

    for src_index, l in enumerate(levels):
        node = f'new CustomNode("{src}-{src_index}", {r}, 0, {is_terminal}, [], {json.dumps(l)},{d})'
        typescript += f"HAND_MDP.addNode({node});\n"

typescript += "\n// ========= Edges =========\n"
for src in G['graph']:
    if src == "start":
        for tgt in G['graph'][src]["neighbors"]:
            for tgt_index in range(id_to_lvls[tgt]):
                tgt_name = f"{tgt}-{tgt_index}"
                args = f'"{src}", "{tgt_name}", [["{tgt_name}", 0.99], [KEY_DEATH, 0.01]]'
                typescript += f'HAND_MDP.addDefaultEdge({args});\n'

        continue

    for tgt in G['graph'][src]["neighbors"]:
        for src_index in range(id_to_lvls[src]):
            src_name = f"{src}-{src_index}"

            for tgt_index in range(id_to_lvls[tgt]):
                tgt_name = f"{tgt}-{tgt_index}"
                args = f'"{src_name}", "{tgt_name}", [["{tgt_name}", 0.99], [KEY_DEATH, 0.01]]'
                typescript += f'HAND_MDP.addDefaultEdge({args});\n'

    typescript += "\n"

PATH = os.path.join("..", "src", "LevelGeneration", "handcraftedMDP.ts")
with open(PATH, "w") as f:
    f.write(typescript)

print(f"Graph and levels written to: {PATH}")
