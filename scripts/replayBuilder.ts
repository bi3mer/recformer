import { Action } from "../src/Agents/action";
import { AGENT_EMPTY } from "../src/Agents/agentType";
import { idToLevel } from "../src/LevelGeneration/levels";
import { ASTAR_FRAME_TIME, ASTAR_UPDATES_PER_FRAME, astar } from "../src/aStar";
import { GameModel } from "../src/gameModel";

// TODO: Should export constants and main menu should use those
//       instead of whatever is currently in the astar code.
//
const start = performance.now();

let replaysFile = "// Generated by scripts/replayBuilder.ts\n";
replaysFile += `import { Action } from "./Agents/action"\n\n`;

replaysFile += `export const REPLAY_FRAME_TIME = ${ASTAR_FRAME_TIME};\n`;
replaysFile += `export const REPLAY_UPDATES_PER_FRAME = ${ASTAR_UPDATES_PER_FRAME};\n\n`;
replaysFile += `export const replays = {\n`;

const keys = Object.keys(idToLevel);

for (let i = 0; i < keys.length; ++i) {
  const K = keys[i];
  const levels = idToLevel[K];
  const actions: Action[][] = [];
  console.log(`=================== K = ${K} ===================`);
  for (let jj = 0; jj < levels.length; ++jj) {
    const gm = new GameModel(levels[jj], AGENT_EMPTY);
    const [levelActions, _] = astar(gm);

    if (levelActions === undefined) {
      console.log(`A* failed for level ${K}`);
      process.exit(1);
    } else {
      actions.push(levelActions);
    }

    // write
    replaysFile += `  "${K}": [\n`;
    for (let jj = 0; jj < actions.length; ++jj) {
      const levelActions = actions[jj];
      replaysFile += `    [\n`;
      for (
        let actionIndex = 0;
        actionIndex < levelActions.length;
        ++actionIndex
      ) {
        const a = levelActions[actionIndex];
        replaysFile += `        new Action(${a.moveRight},${a.moveLeft},${a.jump}),\n`;
      }

      replaysFile += `    ],\n`;
    }

    replaysFile += "  ],\n";
  }
}

replaysFile += "\n};";

const end = performance.now();

const file = Bun.file("./src/replays.ts");
await Bun.write(file, replaysFile);
console.log(`DONE: took ${end - start} ms`);
