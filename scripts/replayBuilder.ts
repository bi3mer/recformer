import { Action } from "../src/Agents/action";
import { AGENT_EMPTY } from "../src/Agents/agentType";
import { CustomNode } from "../src/LevelGeneration/customNode";
import { MDP } from "../src/LevelGeneration/levels";
import { ASTAR_FRAME_TIME, ASTAR_UPDATES_PER_FRAME, astar } from "../src/aStar";
import { GameModel } from "../src/gameModel";

// TODO: Should export constants and main menu should use those
//       instead of whatever is currently in the astar code.
//
const start = performance.now();

let replaysFile = "// Generated by scripts/replayBuilder.ts\n";
replaysFile += `import { Action } from "./Agents/action"\n\n`;

replaysFile += `export const REPLAY_FRAME_TIME = ${ASTAR_FRAME_TIME};\n`;
replaysFile += `export const REPLAY_UPDATES_PER_FRAME = ${ASTAR_UPDATES_PER_FRAME};\n\n`;
replaysFile += `export const replays = {\n`;

for (const K of Object.keys(MDP.nodes)) {
  if (K === "start" || K === "death") {
    continue;
  }

  const levels = (MDP.nodes[K] as CustomNode).levels;
  replaysFile += `  "${K}": [\n`;
  for (let jj = 0; jj < levels.length; ++jj) {
    const start = performance.now();
    replaysFile += "    [\n";
    const gm = new GameModel(levels[jj], AGENT_EMPTY);
    const [levelActions, _] = astar(gm);
    const end = performance.now();

    console.log(`${K}-${jj}: ${end - start} ms`);
    if (levelActions === undefined) {
      console.log(`A* failed for level ${K}`);
      process.exit(1);
    }

    // write
    for (let jj = 0; jj < levelActions.length; ++jj) {
      const a = levelActions[jj];
      replaysFile += `        new Action(${a.moveRight},${a.moveLeft},${a.jump}),\n`;
    }
    replaysFile += "    ],\n";
  }
  replaysFile += "  ],\n";
}

replaysFile += "\n};";

const end = performance.now();

const file = Bun.file("./src/replays.ts");
await Bun.write(file, replaysFile);
console.log(`DONE: took ${end - start} ms`);
